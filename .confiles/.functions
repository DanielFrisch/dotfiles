# -------------------------------------------------------------------
# Update Packages
# -------------------------------------------------------------------
UPDATE_OSX='..........Lets check for OS X updates'
UPDATE_HOMEBREW='..........Updating Homebrew to the latest version'
UPGRADE_HOMEBREW='..........Upgrading already-installed Homebrew formulas'
CLEAN_HOMEBREW='..........Cleaning up outdated versions from the Homebrew cellar'
DR_HOMEBREW='..........Checking with the Doctor'
UPDATE_GEM='..........Updating the GEM System'
UPDATE_GEMS='..........Updating Installed GEMs'
UPDATE_GEMS_CLEANUP='..........Cleaning up the GEMs'
NPM_PACKAGE_UPDATE='..........Updating already-installed Node-NPM packages'
NPM_UPDATE='..........Updating NPM to the latest stable'

function update() {
	echo -e "$fg_bold[cyan] $UPDATE_OSX $reset_color"
	softwareupdate --install --all
	echo -e "$fg_bold[cyan] $UPDATE_HOMEBREW $reset_color"
	brew update
	echo -e "$fg_bold[cyan] $UPGRADE_HOMEBREW $reset_color"
	brew upgrade --all
	echo -e "$fg_bold[cyan] $CLEAN_HOMEBREW $reset_color"
	brew cleanup
	echo -e "$fg_bold[cyan] $DR_HOMEBREW $reset_color"
	brew doctor
	echo -e "$fg_bold[cyan] $NPM_UPDATE $reset_color"
	npm update npm -g
	echo -e "$fg_bold[cyan] $NPM_PACKAGE_UPDATE $reset_color"
	npm update -g
	echo -e "$fg_bold[cyan] $UPDATE_RVM $reset_color"
	sudo gem update --system
	echo -e "$fg_bold[cyan] $UPDATE_GEMS $reset_color"
	sudo gem update
	echo -e "$fg_bold[cyan] $UPDATE_GEMS_CLEANUP $reset_color"
	sudo gem cleanup
}

# UPDATE HOMEBREW ONLY
function brewup(){
	echo -e "$fg_bold[cyan] $UPDATE_HOMEBREW $reset_color"
	brew update
	echo -e "$fg_bold[cyan] $UPGRADE_HOMEBREW $reset_color"
	brew upgrade --all
	echo -e "$fg_bold[cyan] $CLEAN_HOMEBREW $reset_color"
	brew cleanup
	echo -e "$fg_bold[cyan] $DR_HOMEBREW $reset_color"
	brew doctor
}

# -------------------------------------------------------------------
# Wordpress
# -------------------------------------------------------------------
function wpinstall(){

	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[yellow] Creating the Project"
	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------$reset_color"
	mkdir -p ~/Sites/"$@" && cd ~/Sites/"$@"
	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[yellow] Downloading WordPress from the cloud"
	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------$reset_color"
	wget --show-progress http://wordpress.org/latest.zip .;
	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[yellow] Setting up the Project!"
	echo -e "$fg_bold[yellow]---------------------------------------------------------------------------------$reset_color"
	unzip latest.zip;
	mv wordpress/* .;
	rm -rf wordpress latest.zip readme.html license.txt xmlrpc.php;
	mv wp-config-sample.php wp-config.php;
	echo -e "$fg_bold[blue]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[blue] DATABASE$reset_color $fg_bold[yellow]"$@"$rest_color $fg_bold[blue]CREATED"
	echo -e "$fg_bold[blue]---------------------------------------------------------------------------------$reset_color"
	mysqladmin -uroot -proot CREATE "$@";
	echo -e "$fg_bold[blue]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[blue] SETTING UP THE $reset_color $fg_bold[yellow]"$@"$rest_color $fg_bold[blue]WPCONFIG"
	echo -e "$fg_bold[blue]---------------------------------------------------------------------------------$reset_color"
	sed -i "" "s/database_name_here/$@/g; s/username_here/root/g; s/password_here/root/g wp-config.php"  wp-config.php;
	echo -e "$fg_bold[red]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[red] Salts Copied to Clipboard! You know if you want them"
	echo -e "$fg_bold[red]---------------------------------------------------------------------------------$reset_color"
	SALT=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)
	STRING='put your unique phrase here'
	printf '%s\n' "g/$STRING/d" a "$SALT" . w | ed -s wp-config.php
	echo -e "$fg_bold[red]---------------------------------------------------------------------------------"
	echo -e "$fg_bold[red] Happy hacking!"
	echo -e "$fg_bold[red]---------------------------------------------------------------------------------$reset_color"
	/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl -b . && open . && subl wp-config.php;
}

# -------------------------------------------------------------------
# Simple calculator
# -------------------------------------------------------------------
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		e
		printf "$result"
	fi
	printf "\n"
}

# -------------------------------------------------------------------
# Create a new directory and enter it
# -------------------------------------------------------------------
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# -------------------------------------------------------------------
# Determine size of a file or total size of a directory
# -------------------------------------------------------------------

function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# -------------------------------------------------------------------
# compressed file expander
# (from https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh)
# -------------------------------------------------------------------
ex() {
    if [[ -f $1 ]]; then
        case $1 in
          *.tar.bz2) tar xvjf $1;;
          *.tar.gz) tar xvzf $1;;
          *.tar.xz) tar xvJf $1;;
          *.tar.lzma) tar --lzma xvf $1;;
          *.bz2) bunzip $1;;
          *.rar) unrar $1;;
          *.gz) gunzip $1;;
          *.tar) tar xvf $1;;
          *.tbz2) tar xvjf $1;;
          *.tgz) tar xvzf $1;;
          *.zip) unzip $1;;
          *.Z) uncompress $1;;
          *.7z) 7z x $1;;
          *.dmg) hdiutul mount $1;; # mount OS X disk images
          *) echo "'$1' cannot be extracted via >ex<";;
    esac
    else
        echo "'$1' is not a valid file"
    fi
}

# -------------------------------------------------------------------
# any function from http://onethingwell.org/post/14669173541/any
# search for running processes
# -------------------------------------------------------------------
any() {
    emulate -L zsh
    unsetopt KSH_ARRAYS
    if [[ -z "$1" ]] ; then
        echo "any - grep for process(es) by keyword" >&2
        echo "Usage: any " >&2 ; return 1
    else
        ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
    fi
}

# -------------------------------------------------------------------
# display a neatly formatted path
# -------------------------------------------------------------------
path() {
  echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$fg_no_bold[green]/u); \
           sub(\"/bin\",   \"$fg_no_bold_bold[blue]/b); \
           sub(\"/opt\",   \"$fg_no_bold[cyan]/o); \
           sub(\"/sbin\",  \"$print $bg[blue]]......sb\
           sub(\"/local\", \"$fg_no_bold[yellow]/loc); \
           print }"
}
# -------------------------------------------------------------------
# Mac specific functions
# -------------------------------------------------------------------
if [[ $IS_MAC -eq 1 ]]; then

    # view man pages in Preview
    pman() { ps=`mktemp -t manpageXXXX`.ps ; man -t $@ > "$ps" ; open "$ps" ; }

    # function to show interface IP assignments
    ips() { foo=`/Users/mark/bin/getip.py; /Users/mark/bin/getip.py en0; /Users/mark/bin/getip.py en1`; echo $foo; }

    # notify function - http://hints.macworld.com/article.php?story=20120831112030251
    notify() { automator -D title=$1 -D subtitle=$2 -D message=$3 ~/Library/Workflows/DisplayNotification.wflow }
fi

# -------------------------------------------------------------------
# nice mount (http://catonmat.net/blog/another-ten-one-liners-from-commandlingfu-explained)
# displays mounted drive information in a nicely formatted manner
# -------------------------------------------------------------------
function nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ; }

# -------------------------------------------------------------------
# myIP address
# -------------------------------------------------------------------
function myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

# -------------------------------------------------------------------
# (s)ave or (i)nsert a directory.
# -------------------------------------------------------------------
s() { pwd > ~/.save_dir ; }
i() { cd "$(cat ~/.save_dir)" ; }

# -------------------------------------------------------------------
# console function
# -------------------------------------------------------------------
function console () {
  if [[ $# > 0 ]]; then
    query=$(echo "$*"|tr -s ' ' '|')
    tail -f /var/log/system.log|grep -i --color=auto -E "$query"
  else
    tail -f /var/log/system.log
  fi
}

# -------------------------------------------------------------------
# shell function to define words
# http://vikros.tumblr.com/post/23750050330/cute-little-function-time
# -------------------------------------------------------------------
givedef() {
  if [[ $# -ge 2 ]] then
    echo "givedef: too many arguments" >&2
    return 1
  else
    curl "dict://dict.org/d:$1"
  fi
}

# -------------------------------------------------------------------
# Use Git’s col_boldoblue] diff when available
# -------------------------------------------------------------------
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# -------------------------------------------------------------------
# Create a data URL from a file
# -------------------------------------------------------------------
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}
# -------------------------------------------------------------------
# Start an HTTP server from a directory, optionally specifying the port
# -------------------------------------------------------------------
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}
# -------------------------------------------------------------------
# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
# -------------------------------------------------------------------
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# -------------------------------------------------------------------
# Compare original and gzipped file size
# -------------------------------------------------------------------
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# -------------------------------------------------------------------
# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
# -------------------------------------------------------------------
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# -------------------------------------------------------------------
# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
# -------------------------------------------------------------------
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# -------------------------------------------------------------------
# All the dig info
# -------------------------------------------------------------------
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# -------------------------------------------------------------------
# Escape UTF-8 characters into their 3-byte format
# -------------------------------------------------------------------
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# -------------------------------------------------------------------
# Decode \x{ABCD}-style Unicode escape sequences
# -------------------------------------------------------------------
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# -------------------------------------------------------------------
# Get a character’s Unicode code point
# -------------------------------------------------------------------
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# -------------------------------------------------------------------
# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
# -------------------------------------------------------------------
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# -------------------------------------------------------------------
# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
# -------------------------------------------------------------------
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# -------------------------------------------------------------------
# Manually remove a downloaded app or file from the quarantine
# -------------------------------------------------------------------
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}
# # -------------------------------------------------------------------
# # SSH Agent
# # -------------------------------------------------------------------

# # force ssh passphrase to start terminal
# SSH_ENV="$HOME/.ssh/environment"

# function start_agent {
#     echo "Initialising new SSH agent..."
#     /usr/local/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
#     echo succeeded
#     chmod 600 "${SSH_ENV}"
#     . "${SSH_ENV}" > /dev/null
#     /usr/local/bin/ssh-add;
# }

# # Source SSH settings, if applicable

# if [ -f "${SSH_ENV}" ]; then
#     . "${SSH_ENV}" > /dev/null
#     #ps ${SSH_AGENT_PID} doesn't work under cywgin
#     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#         start_agent;
#     }
# else
#     start_agent;
# fi
